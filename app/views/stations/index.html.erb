

<!-- <%= form_for @new_station, url: {action: "create"} do |f| %>
  Station ID: <%= f.text_field :stid %>
  <%= f.submit "Add Station" %>
<% end %> -->

<div id="new-station">
  <a class="generic-button add-station">Add Station</a>
  <input class="typeahead strong-hide" type="text" placeholder="Add new station by name...">
</div>

<div class="mapbox-container">
  <div id='mapbox-map' style='width: 100%; height: 800px;'></div>
</div>


<div class="station-list">
  <div class="station-header">
    <h2 class="station-title">My Stations</h2>
  </div>

  <div class="station-list-content">
    <% if @stations.length > 0 %>
      <table class="table station-table click-to-scroll highlight responsive-table bordered">
        <thead>
          <tr>
            <th scope="col"></th>
            <th class="text-center" scope="col">State</th>
            <th class="text-center" scope="col">Elevation</th>
            <th class="text-center" scope="col"></th>
          </tr>
        </thead>

        <tbody>
          <% @stations.each do |station| %>

            <tr data-stationId="<%= station[:id] %>">
              <th scope="row" class="station-name"><%= station.name %></th>
              <td class="text-center"><%= station.state %></td>
              <td class="text-center"><%= number_with_delimiter(station.elevation, delimiter: ',') %> ft.</td>
              <td class="text-center"><%= link_to 'Remove', station_path(station), method: :delete, data: { confirm: 'Are you sure?' } %></td>
            </tr>

          <% end %>
        </tbody>
      </table>
    <% else %>
      You do not have any saved stations. Please add a station to see data.
    <% end %>
  </div>
</div>



<% @station_data.each do |station| %>

  <div class="station">

    <div class="station-header" id="station-<%= station[:id] %>">
      <h2 class="station-title"><%= station[:name] %> (<%= station[:stid] %>)</h2>
    </div>

    <div class="station-content">
      <% station[:tables].each do |table| %>
        <div class="data-header"><%= table[:title] %></div class="data-header">

        <table class="table station-table striped">
          <thead>
            <tr>
              <th scope="col"></th>
              <th class="text-center" scope="col">Past 24</th>
              <th class="text-center" scope="col">Past 48</th>
              <th class="text-center" scope="col">Past 72</th>
            </tr>
          </thead>
          <tbody>
            <% table[:rows].each do |datum| %>
              <tr>
                <th scope="row"><%= table[:short_title] %> <%= datum[:spec] %></th>
                <td class="text-center"><%= number_with_precision(datum[:hourly][:twenty_four], precision: 0) || 'N/A' %></td>
                <td class="text-center"><%= number_with_precision(datum[:hourly][:fourty_eight], precision: 0) || 'N/A' %></td>
                <td class="text-center"><%= number_with_precision(datum[:hourly][:seventy_two], precision: 0) || 'N/A' %></td>
              </tr>
            <% end %>
          </tbody>
        </table>

      <% end %>

      <section class="charts">

        <div class="row chart-block">
          <div class="col-md-4">
            <div class="data-header">Temperature</div class="data-header">
          </div>

          <div class="day-selector col-md-4 pull-right">
            <span>Go back
              <input class="days-back"> days
              <button class="change-days" data-chartType="temperature">GO</button>
            </span>

          </div>
          <div id="temperature-chart-<%= station[:stid] %>" class="temperature-chart chart loading-icon" data-stationId="<%= station[:id] %>"></div>
        </div>


        <div class="row chart-block">
          <div class="col-md-4">
            <div class="data-header">Wind</div class="data-header">
          </div>

          <div class="col-md-4 toggle-buttons">
            <button class="toggle-button active" data-seriesId="windGust">Gusts</button>
            <button class="toggle-button active" data-seriesId="windSpeed">Wind</button>
          </div>

          <div class="day-selector col-md-4 pull-right">
            <span>Go back
              <input class="days-back"> days
              <button class="change-days" data-chartType="wind">GO</button>
            </span>

          </div>
          <div id="wind-chart-<%= station[:stid] %>" class="wind-chart chart loading-icon" data-stationId="<%= station[:id] %>"></div>
        </div>

      </section>

    </div>



  </div>

<% end %>

<script>





// refactor out AJAX
// Mark times when faceting could occur on temp graph
// Allow user to create nickname for station
// Add ability to order stations w drag and drop
// Ensure data point only every 15 minutes
// Precipitation density graph
// Add map of stations, click to go to station info
// Add map of stations when adding a new station

$(document).ready(function() {

  initializeMap();
  getStationList();
  addHandlers();
  addDefaultDaysBack();

});

var stations;
var defaultDaysBack = 3;
var windGustDayLimit = 6;

var onInitialChartLoad = function(data, station) {
  snowSense.chartHelper.drawTempChart(data, station.stid);
  snowSense.chartHelper.drawWindChart(data, station.stid);
};

var addHandlers = function() {
  addDaysBackInputHandler();
  addToggleSeriesHandler();
  addStationButtonHandler();
  addStationListClickHandler();
};

var getStationList = function() {
  $.ajax({
     url: '/station_list',
     dataType: 'json',
     type: 'GET'
  }).done(function(data) {
      stations = data;

      data.forEach(function(station) {
        getTimeSeriesData(station, defaultDaysBack, onInitialChartLoad);
      });
  }).fail(function(error) {
      console.log(error);
  });
};


var getTimeSeriesData = function(station, daysBack, onSuccess) {
  var url = '/stations/' + station.id + '/timeseries';
  $.ajax({
     url: url,
     data: {
        format: 'json',
        days_back: daysBack
     },
     dataType: 'json',
     type: 'GET'
  }).done(function(data) {
      onSuccess(data, station)
  }).fail(function(error) {
      console.log(error);
  });
};


var addDefaultDaysBack = function() {

  var inputs = $('.day-selector input');
  inputs.val(defaultDaysBack);

};

var addStationListClickHandler = function() {
  var onClick = function(e) {
    var $target     = $(e.target);
    var $row        = $target.closest('tr');
    var stationId   = $row.attr('data-stationId');

    document.getElementById('station-' + stationId).scrollIntoView({block: 'start', behavior: 'smooth'});

    // $target.hide();
    // $twitterInput.removeClass('strong-hide');
    // $twitterInput.focus();
  };

  $('.station-list .click-to-scroll tr').click(onClick);
};

var addStationButtonHandler = function() {

  var onClick = function(e) {
    var $target     = $(e.target);
    var $stationDiv = $target.closest('#new-station');
    var $twitterInput = $stationDiv.find('.tt-input');

    $target.hide();
    $twitterInput.removeClass('strong-hide');
    $twitterInput.focus();
  };

  $('.add-station').click(onClick);

};

var addDaysBackInputHandler = function() {

  var fetchData = function(e) {
    var $target     = $(e.target);
    var $chartBlock = $target.closest('.chart-block');
    var $chart      = $chartBlock.find('.chart');
    var daysBack    = $chartBlock.find('.days-back').val();
    var stationId   = $chart.attr('data-stationId');
    var station     = findStation(parseInt(stationId));
    var chartType   = $target.attr('data-chartType');

    if (chartType === 'temperature')    fetchTemperatureData(station, daysBack, $chart);
    else if (chartType === 'wind')      fetchWindData(station, daysBack, $chart);
  };

  var fetchWindData = function(station, daysBack, $chart) {

    var chart = $chart.highcharts();
    snowSense.chartHelper.removeAllSeries(chart);
    chart.showLoading();

    var onSuccess = function(data, station) {
      var windSpeedData   = data.map(function(datum) { return datum.wind_speed });
      var windCategories  = data.map(function(datum) { return new Date(datum.date_time).toLocaleString("en-US") });
      var windGustData    = data.map(function(datum) { return datum.wind_gusts });

      snowSense.chartHelper.addWindSpeedSeries(chart, windSpeedData);
      snowSense.chartHelper.addWindGustSeries(chart, windGustData);
      snowSense.chartHelper.addWindDirectionSeries(chart, data);
      chart.xAxis[0].setCategories(windCategories);
      chart.hideLoading();
    };

    getTimeSeriesData(station, daysBack, onSuccess);
  };

  var fetchTemperatureData = function(station, daysBack, $chart) {

    var chart = $chart.highcharts();
    snowSense.chartHelper.removeAllSeries(chart);
    chart.showLoading();

    var onSuccess = function(data, station) {
      var tempData        = data.map(function(datum) { return datum.temperature });
      var tempCategories  = data.map(function(datum) { return new Date(datum.date_time).toLocaleString("en-US") });

      chart.addSeries({ data: tempData });
      chart.xAxis[0].setCategories(tempCategories);
      chart.hideLoading();
    };

    getTimeSeriesData(station, daysBack, onSuccess);
  };

  var handleInput = function(e) {
    var $target     = $(e.target);
    var $selector   = $target.closest('.day-selector');
    var daysBack    = $selector.find('.days-back').val();

    removeError($selector);

    var error = undefined;

    if (!parseInt(daysBack)) {
      error = "You must input a number.";
    } else if (parseInt(daysBack) > 60) {
      error = "You may only look back 60 days";
    }

    if (error) addError(error, $selector);
    else fetchData(e);
  };

  $('.change-days').click(handleInput);
};

var addToggleSeriesHandler = function() {

  var onClick = function(e) {
    var $target     = $(e.target);
    var $chartBlock = $target.closest('.chart-block');
    var $chart      = $chartBlock.find('.chart');
    var seriesId    = $target.attr('data-seriesId');
    var chart       = $chart.highcharts();
    var series      = chart.get(seriesId);

    if ($target.hasClass('active')) {
      $target.removeClass('active');
      series.hide();
    } else {
      $target.addClass('active');
      series.show();
    }
  };

  $('.toggle-button').click(onClick);
}

var findStation = function(stationId) {
    for (var i = 0, len = stations.length; i < len; i++) {
        if (stations[i].id === stationId) return stations[i]; // Return as soon as the object is found
    }
    return null; // The object was not found
};


var addError = function(text, $element) {
  var $span = $('<span class="error-message">' + text + '</span>');
  $element.append($span);
};


var removeError = function($element) {
  var $errorMessage = $element.find('.error-message');
  if ($errorMessage.length > 0) $errorMessage.remove();
};


var stations = new Bloodhound({
  datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
  queryTokenizer: Bloodhound.tokenizers.whitespace,
  remote: {
    url: '/stations/search?query=%QUERY',
    wildcard: '%QUERY'
  }
});


$('#new-station .typeahead').typeahead({
    hint: true,
    highlight: true,
    minLength: 3,
    displayKey: 'name',
  },
  {
    name: 'states',
    source: stations,
    limit: 10,
    templates: {
    suggestion: function (station) {
        return '<p>' + station.name + '</p>';
      }
    }
  }
);

var addUserStation = function(stid) {
  $.ajax({
     url: '/stations',
     dataType: 'html',
     data: { station: { stid: stid } },
     type: 'POST'
  }).done(function(data) {
      location.reload();      // station added, reload page to get new data
  }).fail(function(error) {
      console.log(error);
  });
};

$('.typeahead').on('typeahead:selected', function(evt, item) {
  $('.typeahead').typeahead('val', '');
  addUserStation(item.stid);
});


var initializeMap = function() {

  var createMarkerPopup = function(marker) {
    var $div = $('<div>');
    var $popup = $('<div class="station-popup"></div>');
    $popup.append($('<div class="title">' + marker.properties.name + '</div>'));
    $popup.append($('<div class="elevation">Elevation: ' + marker.properties.elevation + '</div>'));

    var $buttons = $('<div class="buttons"></div>');
    $buttons.append($('<a class="left" href="#">Save</a>'));
    $buttons.append($('<a class="right" href="#">Quick View</a>'));

    $popup.append($buttons);

    $div.append($popup);
    return $div.html();
  }

  $.ajax({
     url: '/stations/active_stations',
     dataType: 'json',
     type: 'GET'
  }).done(function(data) {
      console.log(data);

      data.forEach(function(marker) {
        var coordinates = marker.geometry.coordinates.map(function(coord) { return parseFloat(coord) });
        // create a DOM element for the marker
        var el = document.createElement('div');
        el.className = 'station-marker';
        el.style.backgroundImage = 'url(https://placekitten.com/g/200/)';
        el.style.width = '10px';
        el.style.height = '10px';

        // el.addEventListener('click', function() {
        //
        // });

        var popup = new mapboxgl.Popup()
          .setHTML(createMarkerPopup(marker));

        // add marker to map
        new mapboxgl.Marker(el)
          .setLngLat(coordinates)
          .setPopup(popup)
          .addTo(map);
      });

  }).fail(function(error) {
      console.log(error);
  });

  mapboxgl.accessToken = 'pk.eyJ1IjoiamhlbmxleSIsImEiOiJjamNqbDBuZHA0ZmFlMnFvNTV5ZWJtOTJqIn0.YsUjp-03ob3AzW1lkPvpmw';

  var map = new mapboxgl.Map({
    container: 'mapbox-map',
    style: 'mapbox://styles/mapbox/outdoors-v10',
    center: [-110.834441, 43.501072], // starting position [lng, lat]
    zoom: 9 // starting zoom
  });

  map.addControl(new mapboxgl.NavigationControl())

  map.on('zoom',function(meow) {
    // only fetch when zooming out, and zoom is greater than initial zoom
  })
}


</script>



<%= form_for @new_station, url: {action: "create"} do |f| %>
  Station ID: <%= f.text_field :stid %>
  <%= f.submit "Add Station" %>
<% end %>


<div class="station">
  <h1>My Stations</h1>

  <% if @stations.length > 0 %>
    <table class="table station-table">
      <thead>
        <tr>
          <th scope="col"></th>
          <th scope="col">State</th>
          <th scope="col">Elevation</th>
          <th scope="col"></th>
        </tr>
      </thead>

      <tbody>
        <% @stations.each do |station| %>

          <tr>
            <th scope="row"><%= station.name %></th>
            <td><%= station.state %></td>
            <td><%= station.elevation %></td>
            <td><%= link_to 'Remove', station, method: :delete, data: { confirm: 'Are you sure?' } %></td>
          </tr>

        <% end %>
      </tbody>
    </table>
  <% else %>
    You do not have any saved stations. Please add a station to see data.
  <% end %>
</div>



<% @station_data.each do |station| %>

  <div class="station">

    <div class="col-xs-12">
      <h2 class="station-title"><%= station[:name] %> (<%= station[:stid] %>)</h2>
    </div>

    <% station[:tables].each do |table| %>
      <h3><%= table[:title] %></h3>

      <table class="table station-table">
        <thead>
          <tr>
            <th scope="col"></th>
            <th scope="col">Past 24</th>
            <th scope="col">Past 48</th>
            <th scope="col">Past 72</th>
          </tr>
        </thead>
        <tbody>
          <% table[:rows].each do |datum| %>
            <tr>
              <th scope="row"><%= table[:short_title] %> <%= datum[:spec] %></th>
              <td><%= datum[:hourly][:twenty_four] || 'N/A' %></td>
              <td><%= datum[:hourly][:fourty_eight] || 'N/A' %></td>
              <td><%= datum[:hourly][:seventy_two] || 'N/A' %></td>
            </tr>
          <% end %>
        </tbody>
      </table>

    <% end %>

    <div class="charts">
      <div class="row">
        <div class="col-md-4">
          <h3>Graphs yo</h3>
        </div>

        <div class="day-selector col-md-4 pull-right">
          <span>Go back
            <input class="days-back" placeholder="3"> days
            <button class="change-days">GO</button>
          </span>

        </div>
      </div>

      <div id="temperature-chart-<%= station[:stid] %>" class="temperature-chart loading-icon" data-stationId="<%= station[:id] %>"></div>

    </div>

  </div>

<% end %>

<script>


$(document).ready(function() {

  getStationList();
  addDaysBackInputHandler();

});

var stations;

var onInitialChartLoad = function(data, station) {
  drawChart(data, station.stid);
};

var getStationList = function() {
  $.ajax({
     url: '/station_list',
     dataType: 'json',
     type: 'GET'
  }).done(function(data) {
      stations = data;

      data.forEach(function(station) {
        getChartData(station, 3, onInitialChartLoad);
      });
  }).fail(function(error) {
      console.log(error);
  });
};


var getChartData = function(station, daysBack, onSuccess) {
  var url = '/stations/' + station.id + '/timeseries';
  $.ajax({
     url: url,
     data: {
        format: 'json',
        days_back: daysBack
     },
     dataType: 'json',
     type: 'GET'
  }).done(function(data) {
      onSuccess(data, station)
  }).fail(function(error) {
      console.log(error);
  });
};



var drawChart = function(data, stid) {

  var tempData;
  var tempCategories;

  tempData        = data.map(function(datum) { return datum.temperature });
  tempCategories  = data.map(function(datum) { return new Date(datum.date_time).toLocaleString("en-US") });

  var element = 'temperature-chart-' + stid;

  $('#' + element).removeClass('loading-icon');

  Highcharts.chart(element, {
      chart: {
          type: 'line'
      },
      title: {
          text: 'Historical Temperature'
      },
      subtitle: {
          text: 'Source: MesoWest'
      },
      xAxis: {
          categories: tempCategories,
          labels: {
              rotation: 45
          },
          minTickInterval: 10
      },
      yAxis: {
          title: {
              text: 'Temperature (°F)'
          }
      },
      tooltip: {
          formatter: function() {
              return 'The temperature on' + this.x + ' was <b>' + this.y + '</b> degrees Farenheit';
          }
      },
      plotOptions: {
          line: {

          }
      },
      series: [{
          name: 'Temperature (°F)',
          data: tempData
      }]
  });

};


var addDaysBackInputHandler = function() {

  var fetchTemperatureData = function(e) {
    var $target     = $(e.target);
    var $charts     = $target.closest('.charts');
    var $chartDiv   = $charts.find('.temperature-chart');
    var daysBack    = $charts.find('.days-back').val();
    var stationId   = $chartDiv.attr('data-stationId');
    var station     = findStation(parseInt(stationId));

    var chart = $chartDiv.highcharts();
    var seriesLength = chart.series.length;
    for (var i = seriesLength -1; i > -1; i--) {
        chart.series[i].remove();
    };
    chart.showLoading();

    var onSuccess = function(data, station) {
      var tempData        = data.map(function(datum) { return datum.temperature });
      var tempCategories  = data.map(function(datum) { return new Date(datum.date_time).toLocaleString("en-US") });

      chart.addSeries({
        data: tempData
      });

      chart.xAxis[0].setCategories(tempCategories);
      chart.hideLoading();
    };

    getChartData(station, daysBack, onSuccess);
  };

  var handleInput = function(e) {
    var $target     = $(e.target);
    var $selector   = $target.closest('.day-selector');
    var daysBack    = $selector.find('.days-back').val();

    removeError($selector);

    var error = undefined;

    if (!parseInt(daysBack)) {
      error = "You must input a number.";
    } else if (parseInt(daysBack) > 60) {
      error = "You may only look back 60 days";
    }

    if (error) addError(error, $selector);
    else fetchTemperatureData(e);
  };

  $('.change-days').click(handleInput);
};

var findStation = function(stationId) {
    for (var i = 0, len = stations.length; i < len; i++) {
        if (stations[i].id === stationId)
            return stations[i]; // Return as soon as the object is found
    }
    return null; // The object was not found
};

var addError = function(text, $element) {
  var span = $('<span class="error-message">' + text + '</span>');
  $element.append(span);
};

var removeError = function($element) {
  var $errorMessage = $element.find('.error-message');
  if ($errorMessage.length > 0) $errorMessage.remove();
}

</script>
